import { GeneratedProject } from "./project.interface";

export class ContentGenerators {
  static generateReadmeContent(project: GeneratedProject): string {
      return `# ${project.name}
  
  ${project.description}
  
  ## Features
  ${project.features.map(feature => `- ${feature}`).join('\n')}
  
  ## Tech Stack
  ${project.techStack.map(tech => `- ${tech}`).join('\n')}
  
  ## Getting Started
  
  1. Clone the repository
  \`\`\`bash
  git clone https://github.com/[username]/${project.repository}.git
  cd ${project.repository}
  \`\`\`
  
  2. Install dependencies
  \`\`\`bash
  npm install
  \`\`\`
  
  3. Run the development server
  \`\`\`bash
  npm start
  \`\`\`
  
  ## Project Structure
  
  Generated by AIWEX - AI-Powered Development Platform
  
  ## Tasks
  ${project.tasks.map(task => `- [ ] ${task.title} (${task.assignedTo})`).join('\n')}
  
  ## Contributing
  
  This project is managed by AI agents. Pull requests are automatically created for feature development.
  `;
    }

  static generateGitignoreContent(techStack: string[]): string {
    let content = `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Temporary files
temp-repos/
*.tmp
*.temp

# Logs
logs
*.log
`;

    if (techStack.some(tech => tech.toLowerCase().includes('react') || tech.toLowerCase().includes('node'))) {
      content += `
# React/Node.js specific
build/
dist/
coverage/
.nyc_output/
`;
    }

    if (techStack.some(tech => tech.toLowerCase().includes('python'))) {
      content += `
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
`;
    }

    return content;
  }

  static generatePackageJsonContent(project: GeneratedProject): string {
      const packageJson = {
        name: project.repository,
        version: "1.0.0",
        description: project.description,
        main: "index.js",
        scripts: {
          start: "node index.js",
          dev: "nodemon index.js",
          test: "jest",
          build: "npm run build"
        },
        dependencies: {},
        devDependencies: {
          nodemon: "^3.0.0",
          jest: "^29.0.0"
        },
        keywords: project.features,
        author: "AIWEX AI Agent",
        license: "MIT"
      };
  
      // Add dependencies based on features
      if (project.features.includes('User Authentication')) {
        packageJson.dependencies['bcrypt'] = '^5.1.0';
        packageJson.dependencies['jsonwebtoken'] = '^9.0.0';
      }
  
      if (project.features.includes('API Integration')) {
        packageJson.dependencies['axios'] = '^1.6.0';
      }
  
      if (project.techStack.some(tech => tech.toLowerCase().includes('express'))) {
        packageJson.dependencies['express'] = '^4.18.0';
      }
  
      if (project.techStack.some(tech => tech.toLowerCase().includes('react'))) {
        packageJson.dependencies['react'] = '^18.2.0';
        packageJson.dependencies['react-dom'] = '^18.2.0';
        packageJson.scripts.start = 'react-scripts start';
        packageJson.scripts.build = 'react-scripts build';
      }
  
      return JSON.stringify(packageJson, null, 2);
    }

  static generateReactAppContent(project: GeneratedProject): string {
      return `import React from 'react';
  import './App.css';
  
  function App() {
    return (
      <div className="App">
        <header className="App-header">
          <h1>${project.name}</h1>
          <p>${project.description}</p>
          <div className="features">
            <h2>Features:</h2>
            <ul>
              ${project.features.map(feature => `<li>${feature}</li>`).join('\n            ')}
            </ul>
          </div>
        </header>
      </div>
    );
  }
  
  export default App;
  `;
    }

  static generateIndexHtmlContent(project: GeneratedProject): string {
      return `<!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${project.name}</title>
  </head>
  <body>
      <div id="root"></div>
  </body>
  </html>
  `;
    }
  

  static generateExpressServerContent(project: GeneratedProject): string {
      return `const express = require('express');
  const app = express();
  const PORT = process.env.PORT || 3000;
  
  // Middleware
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  
  // Routes
  app.get('/', (req, res) => {
    res.json({
      name: '${project.name}',
      description: '${project.description}',
      features: ${JSON.stringify(project.features, null, 2)},
      status: 'Running'
    });
  });
  
  ${project.features.includes('User Authentication') ? `
  // Authentication routes
  app.post('/api/auth/register', (req, res) => {
    // TODO: Implement user registration
    res.json({ message: 'Registration endpoint - To be implemented' });
  });
  
  app.post('/api/auth/login', (req, res) => {
    // TODO: Implement user login
    res.json({ message: 'Login endpoint - To be implemented' });
  });
  ` : ''}
  
  ${project.features.includes('API Integration') ? `
  // API routes
  app.get('/api/data', (req, res) => {
    // TODO: Implement data fetching
    res.json({ message: 'Data endpoint - To be implemented' });
  });
  ` : ''}
  
  app.listen(PORT, () => {
    console.log(\`${project.name} server running on port \${PORT}\`);
  });
  
  module.exports = app;
  `;
    }
}